import os
import shutil
import zipfile
import time
import pyclamd
import concurrent.futures  # Import for multi-threading

def scan_directory(directory):
    infected_files = []
    
    def scan_file(file_path):
        if is_infected(file_path):
            infected_files.append(file_path)
            quarantine_file(file_path)
        else:
            print(f"Scanning file: {file_path}")

    with concurrent.futures.ThreadPoolExecutor() as executor:
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                executor.submit(scan_file, file_path)

    print(f"Scanning completed. Total infected files found: {len(infected_files)}")
    print("Infected files:")
    for file in infected_files:
        print(file)

def is_infected(file_path):
    client = pyclamd.ClamdAgnostic()
    scan_result = client.scan_file(file_path)
    if scan_result['stream'][0] == 'FOUND':
        return True
    return False

def quarantine_file(file_path):
    quarantine_dir = "."
    if not os.path.exists(quarantine_dir):
        os.makedirs(quarantine_dir)
    
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    archive_path = os.path.join(quarantine_dir, f"infected_{timestamp}.zip")
    with zipfile.ZipFile(archive_path, 'w') as zipf:
        zipf.write(file_path, os.path.basename(file_path))

def main():
    scan_directory(".")

if __name__ == "__main__":
    main()
